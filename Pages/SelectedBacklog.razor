@page "/selectedBacklog/{id}"
@using Microsoft.Graph

@inject BacklogsWeb.Graph.GraphClientFactory clientFactory
@inject NavigationManager uriHelper

<AuthorizeView>
	<div class="row">
		<div class="col">
			<table>
				<tr>
					<img src=@selectedBacklog?.ImageURL height=200 width=200 />
					<br />
				</tr>
				<tr>
					<div>
						<h5>@selectedBacklog?.Name</h5>
						<h6>@selectedBacklog?.Director</h6>
						<p>@selectedBacklog?.Description</p>
					</div>
				</tr>
			</table>
		</div>

		<div>
			<div class="col">
			<table>
				<tr>
					<th>Created Date</th>
					<th>Target Date</th>
				</tr>
				<tr>
					<td>@selectedBacklog?.CreatedDate</td>
					<td>@selectedBacklog?.TargetDate</td>
				</tr>
			</table>
		</div>
		</div>

	<br />
	<br />
	<br />

	<div>
		<br />
		<h5>Progress</h5>
		<form>
			<input type="number" min="0" max=@selectedBacklog.Length @bind=@selectedBacklog.Progress />
			<label> of <strong>@selectedBacklog.Length</strong> @selectedBacklog.Units</label>
		</form>
		<br />
			@{
				var progressCss = "progress" + "";
				var progressWidthStyle = (((float)selectedBacklog?.Progress / selectedBacklog?.Length) * 100) + "%";
			}
		<div class=@progressCss>
			<div class="progress-bar" role="progressbar" style="width: @progressWidthStyle" aria-valuenow=@selectedBacklog?.Progress
			aria-valuemin="0" aria-valuemax="100"></div>
		</div>
	</div>

	<br />
	<br />

	<div>
		<br />
		<form>
			<input type="button" @onclick="@SaveBacklog" value="Save" />
			<input type="button" @onclick="@DeleteBacklog" value="Delete" />
		</form>
		<br />
		<p>Have you finished checking this out?</p>
		<button>Mark As Complete</button>

			@{
				if(showRatingBox)
				{
					
				}
			}

		<br />
		<br />
	
		<p>Metadata obtained from <a href=@sourceLink>@source</a></p>
		</div>
	</div>
</AuthorizeView>

@code {
	[CascadingParameter]
	private Task<AuthenticationState>? authenticationState { get; set; }
	[Parameter]
	public string id { get; set; }
	private GraphServiceClient? graphClient;
	private List<Backlog>? allBacklogs;
	private Backlog? selectedBacklog;
	private string? source;
	private Uri? sourceLink;
	private bool showRatingBox = false;

	protected override async Task OnInitializedAsync()
	{
		graphClient = clientFactory.GetAuthenticatedClient();
		var user = (await authenticationState).User;

		//await BacklogsSingleton.GetInstance().ReadDataAsync(graphClient);
		allBacklogs = BacklogsSingleton.GetInstance().GetIncompleteBacklogs();
	}

	protected override void OnParametersSet()
	{
		selectedBacklog = allBacklogs?.First(b => b.Id.ToString() == id);
		switch(selectedBacklog?.Type)
		{
			case "Film":
				source = "IMdB";
				sourceLink = new Uri("https://www.imdb.com/");
				break;
			case "Album":
				source = "LastFM";
				sourceLink = new Uri("https://www.last.fm/");
				break;
			case "TV":
				source = "IMdB";
				sourceLink = new Uri("https://www.imdb.com/");
				break;
			case "Game":
				source = "IGDB";
				sourceLink = new Uri("https://www.igdb.com/discover");
				break;
			case "Book":
				source = "Google Books";
				sourceLink = new Uri("https://books.google.com/");
				break;
		}
	}

	public async void SaveBacklog()
	{
		for(int i = 0; i< allBacklogs.Count; i++)
		{
			if(allBacklogs[i].Id.ToString() == id)
			{
				allBacklogs[i] = selectedBacklog;
			}
		}
		BacklogsSingleton.GetInstance().SaveBacklogs(allBacklogs);
		await BacklogsSingleton.GetInstance().WriteDataAsync(graphClient);
	}

	public async void DeleteBacklog()
	{
		allBacklogs.Remove(selectedBacklog);
		BacklogsSingleton.GetInstance().SaveBacklogs(allBacklogs);
		await BacklogsSingleton.GetInstance().WriteDataAsync(graphClient);
		uriHelper.NavigateTo("/");
	}
}
