@page "/searchResults/{name}/{date}/{type}"
@using BacklogsWeb.Utils
@using Microsoft.Graph
@using Newtonsoft.Json
@using System.Globalization
@using static BacklogsWeb.Utils.MediaObject

@inject BacklogsWeb.Graph.GraphClientFactory clientFactory
@inject NavigationManager uriHelper
@inject IJSRuntime JsRuntime

<h3>Search Results for @name</h3>

<style>
      .container {
        display: flex;
        align-items: center;
        justify-content: center
      }
      img {
        max-width: 100%
      }
      .image {
        flex-basis: 40%
      }
      .text {
        font-size: 20px;
        padding-left: 20px;
      }
</style>

<ul>
	@foreach(var res in results)
	{
		<li>
			<div class="container">
				<div class = "image">
					<img src=@res.ImageURL height=100 width=100 >
				</div>
				<div class="text">
					<p @onclick="@(() => SearchResultClicked(res.Id))">@res.Name</p>
					<p>@res.Description</p>
				</div>
			</div>
		</li>
	}
</ul>

@code {
	[CascadingParameter]
	private Task<AuthenticationState>? authenticationState { get; set; }
	private GraphServiceClient? graphClient;
	private List<Backlog> backlogs;
	[Parameter]
	public string? name { get; set; }
	[Parameter]
	public string? date { get; set; }
	[Parameter]
	public string? type { get; set; }

	private List<BacklogsWeb.SearchResult>? results;


	protected override async Task OnInitializedAsync()
	{
		graphClient = clientFactory.GetAuthenticatedClient();
		backlogs = BacklogsSingleton.GetInstance().GetBacklogs();
	}

	protected override async void OnParametersSet()
	{
		Console.WriteLine($"Name is {name}, date is {date} and type is {type}");
		switch(type)
		{
			case "Film":
				await SearchFilmBacklog();
				break;
			case "TV":
				await SearchSeriesBacklogs();
				break;
			case "Book":
				await SearchBookBacklogs();
				break;
			case "Game":
				await SearchGameBacklogs();
				break;
			case "Album":
				await CreateMusicBacklog();
				break;
		}
	}

	private async void SearchResultClicked(string id)
	{
		switch(type)
		{
			case "Film":
				await CreateFilmBacklog(id);
				break;
			case "TV":
				await CreateSeriesBacklog(id);
				break;
			case "Book":
				await CreateBookBacklog(id);
				break;
			case "Game":
				await CreateGameBacklog(id);
				break;
		}
	}

	private async Task SearchFilmBacklog()
	{
		string response = await RestClient.GetFilmResponse(name);
		FilmResult filmResult = JsonConvert.DeserializeObject<FilmResult>(response);
		if(filmResult.results.Length > 0)
		{
			results = new List<BacklogsWeb.SearchResult>();
			foreach(var result in filmResult.results)
			{
				try
				{
					results.Add(new BacklogsWeb.SearchResult
						{
							Id = result.id,
							Name = result.title,
							Description = result.description,
							ImageURL = result.image
						});
				}
				catch
				{
					continue;
				}
			}
			this.StateHasChanged();
		}
		else
		{
			// Show result dialog
		}
	}

	private async Task SearchBookBacklogs()
	{
		string response = await RestClient.GetBookResponse(name);
		var bookData = JsonConvert.DeserializeObject<BookInfo>(response);
		if(bookData.items.Count > 0)
		{
			results = new List<BacklogsWeb.SearchResult>();
			foreach(var item in bookData.items)
			{
				try
				{
					results.Add(new BacklogsWeb.SearchResult
						{
							Id = item.id,
							Name = item.volumeInfo.title,
							Description = item.volumeInfo.publishedDate,
							ImageURL = item.volumeInfo.imageLinks.thumbnail
						});
				}
				catch
				{
					continue;
				}
			}
			this.StateHasChanged();
		}
		else
		{
			// Show error dialog
		}
	}

	private async Task SearchSeriesBacklogs()
	{
		string response = await RestClient.GetSeriesResponse(name);
		SeriesResult seriesResult = JsonConvert.DeserializeObject<SeriesResult>(response);
		if(seriesResult.results.Length > 0)
		{
			results = new List<BacklogsWeb.SearchResult>();
			foreach(var result in seriesResult.results)
			{
				try
				{
					results.Add(new BacklogsWeb.SearchResult
						{
							Id = result.id,
							Name = result.title,
							Description = result.description,
							ImageURL = result.image
						});
				}
				catch
				{
					continue;
				}
			}
			this.StateHasChanged();
		}
		else
		{
			// Show error dialog
		}
	}

	private async Task SearchGameBacklogs()
	{
		string response = await RestClient.GetGameResponse(name);
		var result = JsonConvert.DeserializeObject<GameResponse[]>(response);
		if(result?.Length > 0)
		{
			results = new List<BacklogsWeb.SearchResult>();
			foreach (var res in result)
			{
				string id = res.id.ToString();
				string gameResponse = await RestClient.GetGameResult(id);
				var gameResult = JsonConvert.DeserializeObject<GameResult[]>(gameResponse);
				var gameCoverResponse = await RestClient.GetGameCover(gameResult[0].cover.ToString());
				var gameCover = JsonConvert.DeserializeObject<GameCover[]>(gameCoverResponse);
				try
				{
					string releaseDateResponse = await RestClient.GetGameReleaseResponse(gameResult[0].release_dates[0].ToString());
					var releaseDateTimestamp = JsonConvert.DeserializeObject<GameReleaseDate[]>(releaseDateResponse);
					var releaseDate = DateTimeOffset.FromUnixTimeSeconds(releaseDateTimestamp[0].date);
					Game game = new Game
                    {
                        name = gameResult[0].name + $" ({releaseDate.Year})",
                        releaseDate = releaseDate.ToString("D"),
                        image = "https:" + gameCover[0].url
                    };
					results.Add(new BacklogsWeb.SearchResult
                    {
                        Id = res.id.ToString(),
                        Name = game.name,
                        Description = game.releaseDate,
                        ImageURL = game.image
                    });
				}
				catch
				{
					continue;
				}
			}
			this.StateHasChanged();
		}
		else
		{
			// Show error dialog
		}
	}

	private async Task CreateBacklogItem(Backlog backlog)
	{
		if (backlog != null)
		{
			backlogs.Add(backlog);
			BacklogsSingleton.GetInstance().SaveBacklogs(backlogs);
			await BacklogsSingleton.GetInstance().WriteDataAsync(graphClient);
			uriHelper.NavigateTo("/");
		}
		else
		{
			bool result = await JsRuntime.InvokeAsync<bool>("confirm", "Could not create backlog");
		}
	}

	private async Task CreateFilmBacklog(string selectedItemId)
	{
		string filmData = await RestClient.GetFilmDataResponse(selectedItemId);
		Film film = JsonConvert.DeserializeObject<Film>(filmData);
		Backlog backlog = new Backlog
		{
			Id = Guid.NewGuid(),
			Name = film.fullTitle,
			Type = "Film",
			ReleaseDate = film.releaseDate,
			ImageURL = film.image,
			TargetDate = date,
			Description = film.plot,
			Length = film.runtimeMins,
			Director = film.directors,
			Progress = 0,
			Units = "Minutes",
			ShowProgress = true,
			UserRating = -1,
			CreatedDate = DateTimeOffset.Now.Date.ToString("D", CultureInfo.InvariantCulture)
		};
		await CreateBacklogItem(backlog);
	}

	private async Task CreateMusicBacklog()
	{
		try
		{
			string response = await RestClient.GetMusicResponse(name);
			var musicData = JsonConvert.DeserializeObject<MusicData>(response);
			if(musicData != null)
			{
				Music music = new Music
				{
					name = musicData.album.name,
					artist = musicData.album.artist,
					description = musicData.album.wiki == null ? "No summary found" : musicData.album.wiki.summary,
					releaseDate = musicData.album.wiki == null ? "" : musicData.album.wiki.published,
					image = musicData.album.image[2].Text
				};
				Backlog backlog = new Backlog
                 {
                        Id = Guid.NewGuid(),
                        Name = music.name,
                        Type = "Album",
                        ReleaseDate = music.releaseDate,
                        ImageURL = music.image,
                        TargetDate = date,
                        Description = music.description,
                        Director = music.artist,
                        Progress = 0,
                        Units = "Minutes",
                        ShowProgress = false,
                        UserRating = -1,
                        CreatedDate = DateTimeOffset.Now.Date.ToString("D", CultureInfo.InvariantCulture)
                 };
				await CreateBacklogItem(backlog);
			}
		}
		catch
		{

		}
	}

	private async Task CreateBookBacklog(string id)
	{
		var title = name;
		string response = await RestClient.GetBookResponse(title);
        var bookData = JsonConvert.DeserializeObject<BookInfo>(response);
        Item item = new Item();
        foreach (var i in bookData.items)
        {
            if (i.id == id)
            {
                item = i;
            }
        }
        Book book = new Book
        {
            name = item.volumeInfo.title,
            author = string.Concat(item.volumeInfo.authors),
            desciption = item.volumeInfo.description,
            releaseDate = item.volumeInfo.publishedDate,
            image = item.volumeInfo.imageLinks.thumbnail,
            length = item.volumeInfo.pageCount
        };
        Backlog backlog = new Backlog
        {
            
			Id = Guid.NewGuid(),
            Name = book.name,
            Type = "Book",
            ReleaseDate = book.releaseDate,
            ImageURL = book.image,
            TargetDate = date,
            Description = book.desciption,
            Director = book.author,
            Length = book.length,
            Progress = 0,
            Units = "Pages",
            ShowProgress = true,
            UserRating = -1,
            CreatedDate = DateTimeOffset.Now.Date.ToString("D", CultureInfo.InvariantCulture)
        };
        await CreateBacklogItem(backlog);
    }

	private async Task CreateSeriesBacklog(string id)
    {
        string seriesData = await RestClient.GetSeriesDataResponse(id);
        Series series = JsonConvert.DeserializeObject<Series>(seriesData);
        Backlog backlog = new Backlog
        {
            Id = Guid.NewGuid(),
            Name = series.fullTitle,
            Type = "TV",
            ReleaseDate = series.releaseDate,
            ImageURL = series.image,
            TargetDate = date,
            Description = series.plot,
            Length = series.TvSeriesInfo.Seasons.Count,
            Director = series.TvSeriesInfo.Creators,
            Progress = 0,
            Units = "Season(s)",
            ShowProgress = true,
            UserRating = -1,
            CreatedDate = DateTimeOffset.Now.Date.ToString("D", CultureInfo.InvariantCulture)
        };
        await CreateBacklogItem(backlog);
    }

	private async Task CreateGameBacklog(string id)
    {
        string gameResponse = await RestClient.GetGameResult(id);
        var gameResult = JsonConvert.DeserializeObject<GameResult[]>(gameResponse);
        int companyID = await RestClient.GetCompanyID(gameResult[0].involved_companies[0].ToString());
        var gameCompanyResponse = await RestClient.GetGameCompanyResponse(companyID.ToString());
        var gameCompany = JsonConvert.DeserializeObject<GameCompany[]>(gameCompanyResponse);
        var gameCoverResponse = await RestClient.GetGameCover(gameResult[0].cover.ToString());
        var gameCover = JsonConvert.DeserializeObject<GameCover[]>(gameCoverResponse);
        string releaseDateResponse = await RestClient.GetGameReleaseResponse(gameResult[0].release_dates[0].ToString());
        var releaseDateTimestamp = JsonConvert.DeserializeObject<GameReleaseDate[]>(releaseDateResponse);
        var releaseDate = DateTimeOffset.FromUnixTimeSeconds(releaseDateTimestamp[0].date);
        Game game = new Game
        {
            name = gameResult[0].name + $" ({releaseDate.Year})",
            releaseDate = releaseDate.ToString("D"),
            company = gameCompany[0].name,
            image = "https:" + gameCover[0].url,
            storyline = gameResult[0].storyline
        };
        Backlog backlog = new Backlog
        {
            Id = Guid.NewGuid(),
            Name = game.name,
            Type = "Game",
            ReleaseDate = game.releaseDate,
            ImageURL = game.image,
            TargetDate = date,
            Description = game.storyline,
            Length = 0,
            Director = game.company,
            Progress = 0,
            ShowProgress = false,
            UserRating = -1,
            CreatedDate = DateTimeOffset.Now.Date.ToString("D" ,CultureInfo.InvariantCulture)
        };
        await CreateBacklogItem(backlog);
    }
}
