@page "/"
@using Microsoft.Graph
@using System.Globalization
@using System.Diagnostics

@inject BacklogsWeb.Graph.GraphClientFactory clientFactory
@inject NavigationManager uriHelper

<PageTitle>Backlogs</PageTitle>

<div class="jumbotron">
    <h1>Welcome to Backlogs!</h1>
    <p>This is a very early version and lacks many of the features of the Windows application.</p>
    <br />
    <AuthorizeView>
        <Authorized>
            <h4>Recently Added</h4>
            <div style="overflow-x:auto;">
                <table>
                    <tr>
                        @foreach(var backlog in recentlyAdded)
                        {
                            <td style="padding: 10px">
                                <div class="card">
                                    <img src=@backlog.ImageURL alt="Cover" height=190 width=140 onclick="@(() => OpenBacklog(backlog.Id))" >
                                </div>
                            </td>
                        }
                    </tr>
                </table>
            </div>

            <h4>In Progress</h4>
            <div style="overflow-x:auto;">
                <table>
                    <tr>
                        @foreach(var backlog in inProgress)
                        {
                        <td style="padding: 10px">
                            <div class="card">
                                <img src=@backlog.ImageURL alt="Cover" height=190 width=140 onclick="@(() => OpenBacklog(backlog.Id))" >
                            </div>
                            @{
				                var progressCss = "progress" + "";
				                var progressWidthStyle = (((float)backlog.Progress / backlog.Length) * 100) + "%";
			                }
		                    <div class=@progressCss style="height: 10px">
			                    <div class="progress-bar" role="progressbar" style="width: @progressWidthStyle; height: 10px" aria-valuenow=@backlog.Progress
			                    aria-valuemin="0" aria-valuemax="100"></div>
		                    </div>
                        </td>
                        }
                    </tr>
                </table>
            </div>

            <h4>Recenly Completed</h4>
            <div style="overflow-x:auto;">
                <table>
                    <tr>
                        @foreach(var backlog in recentlyCompleted)
                        {
                            <td style="padding: 10px">
                                <div class="card">
                                    <img src=@backlog.ImageURL alt="Cover" height=190 width=140>
                                </div>
                                <p><strong>Rating: </strong>@backlog.UserRating</p>
                            </td>
                        }
                    </tr>
                </table>
            </div>
        </Authorized>
        <NotAuthorized>
            <a class="btn btn-primary btn-large" href="authentication/login">Click here to sign in</a>
        </NotAuthorized>
    </AuthorizeView>
</div>

@code
{
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }
    private GraphServiceClient? graphClient;
    private List<Backlog>? recentlyAdded;
    private List<Backlog>? inProgress;
    private List<Backlog>? recentlyCompleted;

    List<Backlog>? incompleteBacklogs;
    List<Backlog>? inProgressBacklogs;
    List<Backlog>? completedBacklogs;

    protected override async Task OnInitializedAsync()
    {
        recentlyAdded = new List<Backlog>();
        inProgressBacklogs = new List<Backlog>();
        inProgress = new List<Backlog>();
        recentlyCompleted = new List<Backlog>();

        var user = (await authenticationState).User;

        await LoadBacklogs();
    }

    private async Task LoadBacklogs()
    {
        graphClient = clientFactory.GetAuthenticatedClient();

        await BacklogsSingleton.GetInstance().ReadDataAsync(graphClient);

        if (BacklogsSingleton.GetInstance().GetCount() > 0)
        {
            incompleteBacklogs = BacklogsSingleton.GetInstance().GetIncompleteBacklogs();
            completedBacklogs = BacklogsSingleton.GetInstance().GetCompletedBacklogs();

            foreach(var backlog in incompleteBacklogs.Where(b => b.Progress > 0.0))
            {
                inProgressBacklogs?.Add(backlog);
            }

            foreach (var backlog in incompleteBacklogs.OrderByDescending(b => DateTimeOffset.Parse(b.CreatedDate, CultureInfo.InvariantCulture)).Skip(0).Take(6))
            {
                recentlyAdded?.Add(backlog);
            }

            foreach(var backlog in inProgressBacklogs.OrderByDescending(b => b.Progress).Skip(0).Take(6))
            {
                inProgress.Add(backlog);
            }

            foreach (var backlog in completedBacklogs.OrderByDescending(b => DateTimeOffset.Parse(b.CompletedDate, CultureInfo.InvariantCulture)).Skip(0).Take(6))
            {
                recentlyCompleted.Add(backlog);
            }
        }
    }

    public void OpenBacklog(Guid id)
	{
		uriHelper.NavigateTo($"selectedBacklog/{id}");
	}
}