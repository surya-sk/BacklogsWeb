@page "/"
@using Microsoft.Graph
@using System.Globalization
@using System.Diagnostics

@inject BacklogsWeb.Graph.GraphClientFactory clientFactory

<div class="jumbotron">
    <h1>Welcome to Backlogs!</h1>
    <AuthorizeView>
        <Authorized>
            <h4>Recently Added</h4>
            <div style="overflow-x:auto;">
                <table>
                    <tr>
                        @foreach(var backlog in recentlyAdded)
                        {
                            <td>
                                <div class="card">
                                    <img src=@backlog.ImageURL alt="Cover" height=190 width=140>
                                </div>
                            </td>
                        }
                    </tr>
                </table>
            </div>

            <h4>In Progress</h4>
                <div style="overflow-x:auto;">
                    <table>
                        <tr>
                            @foreach(var backlog in inProgress)
                            {
                            <td>
                                <div class="card">
                                    <img src=@backlog.ImageURL alt="Cover" height=190 width=140>
                                </div>
                                <p><strong>@backlog.Progress</strong> <strong>@backlog.Units</strong></p>
                            </td>
                            }
                        </tr>
                    </table>
                </div>

            <h4>Recenly Completed</h4>
            <div style="overflow-x:auto;">
                <table>
                    <tr>
                        @foreach(var backlog in recentlyCompleted)
                        {
                            <td>
                                <div class="card">
                                    <img src=@backlog.ImageURL alt="Cover" height=190 width=140>
                                </div>
                                <p><strong>Rating: </strong>@backlog.UserRating</p>
                            </td>
                        }
                    </tr>
                </table>
            </div>
        </Authorized>
        <NotAuthorized>
            <a class="btn btn-primary btn-large" href="authentication/login">Click here to sign in</a>
        </NotAuthorized>
    </AuthorizeView>
</div>

@code
{
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }
    private GraphServiceClient? graphClient;
    private List<Backlog>? recentlyAdded;
    private List<Backlog>? inProgress;
    private List<Backlog>? recentlyCompleted;

    List<Backlog>? incompleteBacklogs;
    List<Backlog>? inProgressBacklogs;
    List<Backlog>? completedBacklogs;

    protected override async Task OnInitializedAsync()
    {
        recentlyAdded = new List<Backlog>();
        inProgressBacklogs = new List<Backlog>();
        inProgress = new List<Backlog>();
        recentlyCompleted = new List<Backlog>();

        var user = (await authenticationState).User;

        await LoadBacklogs();
    }

    private async Task LoadBacklogs()
    {
        graphClient = clientFactory.GetAuthenticatedClient();

        await BacklogsSingleton.GetInstance().ReadDataAsync(graphClient);

        if (BacklogsSingleton.GetInstance().GetCount() > 0)
        {
            incompleteBacklogs = BacklogsSingleton.GetInstance().GetIncompleteBacklogs();
            completedBacklogs = BacklogsSingleton.GetInstance().GetCompletedBacklogs();

            foreach(var backlog in incompleteBacklogs.Where(b => b.Progress > 0.0))
            {
                inProgressBacklogs?.Add(backlog);
            }

            foreach (var backlog in incompleteBacklogs.OrderByDescending(b => DateTimeOffset.Parse(b.CreatedDate, CultureInfo.InvariantCulture)).Skip(0).Take(6))
            {
                recentlyAdded?.Add(backlog);
            }

            foreach(var backlog in inProgressBacklogs.OrderByDescending(b => b.Progress).Skip(0).Take(6))
            {
                inProgress.Add(backlog);
            }

            foreach (var backlog in completedBacklogs.OrderByDescending(b => DateTimeOffset.Parse(b.CompletedDate, CultureInfo.InvariantCulture)).Skip(0).Take(6))
            {
                recentlyCompleted.Add(backlog);
            }
        }
    }
}